package checkerbot

import (
	"context"
	"models"
	"strings"

	"github.com/inpime/sdata"

	"gopkg.in/telegram-bot-api.v4"
)

type NewItemCommand struct{}

func (NewItemCommand) Name() string {
	return "newvision"
}

func (*NewItemCommand) Match(ctx context.Context, s *models.Services) bool {
	update := models.UpdateFromContext(ctx)
	if update.IsCommand() && update.Command == "new" {
		return true
	}

	if update.Page() == "newvision" {
		return true
	}

	return false
}

// TODO:

func (*NewItemCommand) Handler(ctx context.Context, s *models.Services) (err error) {
	update := models.UpdateFromContext(ctx)

	if update.IsCommand() && update.Page() != "newvision" {
		update.SetPage("newvision")
		// TODO: –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å?
		update.SetSection("setToneOfVision")
	}

	if update.IsCommand() && update.Command == "new" {
		// TODO: –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å?== "new" {
		update.SetSection("setToneOfVision")
	}

	switch update.Section() {
	case "setToneOfVision":
		if update.IsCommand() {
			msg := tgbotapi.NewMessage(update.FromChatID, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–Ω–∏—è: –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ?")
			msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("üòÉ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"),
					tgbotapi.NewKeyboardButton("üò° –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ"),
				),
			)
			update.Api.Send(msg)
		} else if update.IsMessage() {
			tone := getToneFromText(update.Message.Text)

			if tone == UnknownTone {
				msg := tgbotapi.NewMessage(update.FromChatID, "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ?")
				msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("üòÉ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"),
						tgbotapi.NewKeyboardButton("üò° –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ"),
					),
				)
				update.Api.Send(msg)
				return nil
			}
			update.User.State.M("tmpvision").Set("tone", tone)
			update.User.Changed = true

			update.SetSection("setTags")

			msg := tgbotapi.NewMessage(update.FromChatID, "–í—ã–±—Ä–∞–ª–∏: "+tone.String()+"\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ —Ç–æ –æ —á–µ–º –≤—ã –ø–∏—à–µ—Ç–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –º–µ—Å—Ç–∞.")
			msg.ReplyMarkup = tgbotapi.NewHideKeyboard(true)
			update.Api.Send(msg)
		}
	case "setTags":
		tags := ""

		if update.IsMessage() {
			tags = update.Message.Text
		}

		if len(tags) == 0 {
			msg := tgbotapi.NewMessage(update.FromChatID, "–î–æ–±–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ —Ç–æ –æ —á–µ–º –≤—ã –ø–∏—à–µ—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –º–µ—Å—Ç–∞.")
			update.Api.Send(msg)
			return nil
		}

		update.User.State.M("tmpvision").Set("tags", tags)
		update.User.Changed = true

		update.SetSection("setDescription")
		msg := tgbotapi.NewMessage(update.FromChatID, "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
		msg.ReplyMarkup = tgbotapi.NewHideKeyboard(true)
		update.Api.Send(msg)
	case "setDescription":
		description := ""

		if update.IsMessage() {
			description = update.Message.Text
		}

		if len(description) == 0 {
			msg := tgbotapi.NewMessage(update.FromChatID, "–î–æ–±–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–Ω–∏—è")
			update.Api.Send(msg)
			return nil
		}

		update.User.State.M("tmpvision").Set("description", description)
		update.User.Changed = true

		update.SetSection("setPhotos")
		msg := tgbotapi.NewMessage(update.FromChatID, "–î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
			),
		)
		update.Api.Send(msg)
	case "setPhotos":
		withPhotos := false

		if update.Message.Photo != nil && len(*update.Message.Photo) > 0 {
			withPhotos = true
		} else if update.IsMessage() && strings.ToLower(update.Message.Text) == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
			withPhotos = false
		}

		if withPhotos {
			files := sdata.NewArray()
			for _, file := range *update.Message.Photo {
				files.Add(file)
			}

			update.User.State.M("tmpvision").Set("photos", files)
			update.User.Changed = true
		}

		defer func() {
			update.User.State.M("tmpvision").Clear()
			update.User.Changed = true
		}()

		vision, err := CreateVisionFromOptions(update.User.ID,
			update.User.State.M("tmpvision"),
			s.DB)

		if err != nil {
			s.Logger.WithError(err).Error("create vision")
			update.SetSection("setToneOfVision")

			msg := tgbotapi.NewMessage(update.FromChatID, `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.`)
			msg.ReplyMarkup = tgbotapi.NewHideKeyboard(true)
			update.Api.Send(msg)
			// TODO: –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å?
			update.SetSection("setToneOfVision")

			return err
		}

		// TODO: —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è vision

		msg := tgbotapi.NewMessage(update.FromChatID, `–ì–æ—Ç–æ–≤–æ. 
		
		`+vision.ViewAsMessage())
		msg.ReplyMarkup = tgbotapi.NewHideKeyboard(true)
		update.Api.Send(msg)
		// TODO: –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å?
		update.SetSection("setToneOfVision")

	default:
	}
	return nil
}

func formatVision(opt *sdata.StringMap) string {
	res := opt.String("tone") + "\n"
	res += opt.String("tags") + "\n"
	res += opt.String("description") + "\n"

	return res
}

// Helpful types

type Tone string

func (t Tone) String() string {
	return string(t)
}

var PositiveTone Tone = "tones:positive"
var NegativeTone Tone = "tones:negative"
var UnknownTone Tone = "tones:unknown"

func getToneFromText(text string) Tone {
	text = strings.ToLower(text)
	if strings.HasSuffix(text, "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ") {
		return PositiveTone
	}

	if strings.HasSuffix(text, "–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ") {
		return NegativeTone
	}

	return UnknownTone
}
